---
import type { GetStaticPaths } from 'astro'
import PagesLayout, {
  type Props as PagesLayoutProps
} from '~/layouts/pages.astro'
import { getImage, Image } from 'astro:assets'
import { getCollection, render } from 'astro:content'

export const getStaticPaths = (async () => {
  const projects = await getCollection('projects', (entry) => entry.data.page)
  return projects.map((project) => ({
    params: {
      id: project.id
    },
    props: {
      project
    }
  }))
}) satisfies GetStaticPaths

const { project } = Astro.props
const { Content } = await render(project)
const props = {
  title: project.data.title,
  description: project.data.description
} satisfies PagesLayoutProps

const image = project.data.image
  ? await getImage({ src: project.data.image, widths: [380] })
  : undefined
---

<PagesLayout {...props}>
  <article class='prose mx-auto'>
    <Content />
  </article>

  <Fragment slot='header'>
    {
      project.data.logo && (
        <hgroup
          id='hgroup'
          class:list={[
            'relative -mx-4 flex aspect-[16/10] flex-col items-center justify-center gap-4 border-t-2 border-zinc-900 px-4 py-8 sm:mx-0 sm:flex-row sm:border-t-0',
            'before:absolute before:inset-0 before:z-[-1] before:block before:h-full before:w-full before:bg-cover before:opacity-20 before:bg-blend-saturation before:[background-image:--background-image] sm:before:rounded-xl'
          ]}
        >
          <Image
            class='w-[144px] sm:w-[288px]'
            src={project.data.logo}
            widths={[288, 576]}
            sizes='(min-width: 640px) 576w, 288w'
            loading='eager'
            alt=''
          />
          <div class='flex flex-col items-center justify-start sm:items-start sm:gap-2'>
            <h1 class='text-xl font-black sm:text-4xl'>{project.data.title}</h1>
            <p class='font-bold'>{project.data.status.toUpperCase()}</p>
            {project.data.dateCompleted && (
              <p class='text-sm italic'>
                Finished at {project.data.dateCompleted.toLocaleDateString()}
              </p>
            )}
          </div>
        </hgroup>
      )
    }
  </Fragment>
</PagesLayout>

<style define:vars={{ 'image-url': image ? `url(${image.src})` : '' }}>
  #hgroup {
    --background-image: linear-gradient(black, black), var(--image-url);
  }
</style>
